# -*- coding: utf-8 -*-
"""Object Detection using YOLOv5s.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lJWaeGuFuUWyqTXbJ7W8TEAXes0qFurY
"""

import torch
from PIL import Image

# Load a pretrained YOLOv5s model
model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)

# Load your test image
img_path = 'man-lakeside-his-dog-10508224.webp'  # Replace with your image filename
img = Image.open(img_path)

# Run object detection
results = model(img)

# Convert to DataFrame and tensor format
df = results.pandas().xyxy[0]
tensor_preds = results.pred[0]

# Class ID mapping (COCO dataset)
class_ids = {
    'person': 0,
    'car': 2,
    'dog': 16
}

# Loop through each class and show/save individually
for class_name, class_id in class_ids.items():
    print(f"\nShowing only '{class_name}' detections")

    # Create a mask for current class
    mask = df['class'] == class_id
    filtered_preds = tensor_preds[mask.values]

    # Replace prediction with only current class
    results.pred[0] = filtered_preds

    # Show result
    results.show()

    # Save to a specific folder
    results.save(save_dir=f'{class_name}_only_output')

class_name=model.names
print (class_name)

import torch
from PIL import Image
import pandas as pd

# Load the YOLOv5 pretrained model
model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)

# Load a traffic/street image
img_path = 'images (1).jpeg'  # Replace with your image path
img = Image.open(img_path)

# Perform object detection
results = model(img)

# Convert predictions to pandas DataFrame
df = results.pandas().xyxy[0]

# Class IDs to count
target_classes = {
    'person': 0,
    'car': 2,
    'bus': 5,
    'truck': 7
}

# Count each class
counts = {label: (df['class'] == class_id).sum() for label, class_id in target_classes.items()}

# Display counts
print("Detection Summary:")
for k, v in counts.items():
    print(f"{k}: {v}")

# Save to CSV
df_counts = pd.DataFrame([counts])
df_counts.to_csv('detection_counts.csv', index=False)
print("\nSaved counts to 'detection_counts.csv'")

import torch
from PIL import Image
import matplotlib.pyplot as plt
import pandas as pd

# Load YOLOv5 model once
model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)

# Load the image
img_path = 'images.jpeg'  # Replace with your image
img = Image.open(img_path)

# Thresholds to test
thresholds = [0.25, 0.5, 0.75]
detection_counts = []

# Run detection for each threshold
for conf in thresholds:
    print(f"\nRunning detection with confidence threshold = {conf}")

    # Set model confidence
    model.conf = conf

    # Run detection
    results = model(img)

    # Get number of detections
    df = results.pandas().xyxy[0]
    count = len(df)

    print(f"Detections at {conf}: {count}")
    detection_counts.append({'confidence': conf, 'detections': count})

# Create DataFrame for summary
df_summary = pd.DataFrame(detection_counts)
df_summary.to_csv('confidence_vs_detections.csv', index=False)

# Plot the result
plt.figure(figsize=(6, 4))
plt.plot(df_summary['confidence'], df_summary['detections'], marker='o', linestyle='-')
plt.title('Confidence Threshold vs Number of Detections')
plt.xlabel('Confidence Threshold')
plt.ylabel('Number of Detections')
plt.grid(True)
plt.tight_layout()
plt.savefig('threshold_vs_detections.png')
plt.show()